buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        flatDir {
            dirs 'libs'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.ajoberstar.grgit' version '4.1.1'
}

apply plugin: 'net.minecraftforge.gradle'

project.ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(dir: file('.'))
    // Get commit id of HEAD.
    gitRevision = git.head().id
    // Get abbreviated commit Id of HEAD
    gitAbbRevision = git.head().abbreviatedId
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    mavenCentral()
    maven {
        name = 'sponge-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    flatDir {
        dirs 'libs'
    }
}

minecraft {
    mappings channel: 'official', version: '1.18.2'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.0'

    implementation 'net.kyori:adventure-api:4.10.1'
    implementation 'net.kyori:adventure-text-serializer-gson:4.9.3'
    implementation 'net.kyori:adventure-text-serializer-legacy:4.9.3'

}

group = pluginGroup
version = gitAbbRevision

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "shadownode",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : getArchiveVersion(),
                "Implementation-Vendor"   : "shadownode",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

shadowJar {
    baseName = rootProject.name

    dependencies {
        include dependency('net.kyori:adventure-api')
        include dependency('net.kyori:adventure-text-serializer-gson')
        include dependency('net.kyori:adventure-text-serializer-legacy')
        include dependency('net.kyori:adventure-key')
        include dependency('net.kyori:examination-api')
        include dependency('net.kyori:examination-string')
    }

    exclude 'META-INF/services/**'
    relocate 'net.kyori', 'io.github.bennyboy1695.simplicity.forge.lib.adventure'
}

artifacts {
    archives shadowJar
}

build.dependsOn tasks.shadowJar

task copyJar(type: Copy) {
    from 'build/libs'
    include rootProject.name + '-' + version + '.jar'
    String server = System.getenv("TEST_SERVER");
    if (server != null)
        into file("$server/custom/plugins")
}

task deleteFiles(type: Delete) {
    String server = System.getenv("TEST_SERVER")
    if (server != null) {
        delete fileTree("$server/custom/plugins") {
            include rootProject.name + '-*.jar'
        }
    }
}